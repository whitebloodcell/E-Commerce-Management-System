<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qf.ecms.mapper.AdminDtoMapper">
    <resultMap id="BaseResultMap" type="com.qf.ecms.domain.dto.AdminDto">
        <id column="admin_id" jdbcType="INTEGER" property="adminId"/>
        <result column="admin_name" jdbcType="VARCHAR" property="adminName"/>
        <result column="admin_password" jdbcType="VARCHAR" property="adminPassword" />
        <result column="role_id" jdbcType="INTEGER" property="roleId"/>
        <result column="admin_status" jdbcType="INTEGER" property="adminStatus" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <association property="adminDetailDto" javaType="com.qf.ecms.domain.dto.AdminDetailDto">
            <id column="admin_detail_id" jdbcType="INTEGER" property="adminDetailId" />
            <result column="admin_id" jdbcType="INTEGER" property="adminId" />
            <result column="sex" jdbcType="INTEGER" property="sex" />
            <result column="age" jdbcType="INTEGER" property="age" />
            <result column="phone" jdbcType="VARCHAR" property="phone" />
            <result column="email" jdbcType="VARCHAR" property="email" />
            <result column="qq" jdbcType="VARCHAR" property="qq" />
            <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        </association>
        <association property="roleDto" javaType="com.qf.ecms.domain.dto.RoleDto">
            <id column="role_id" jdbcType="INTEGER" property="roleId" />
            <result column="role_name" jdbcType="VARCHAR" property="roleName" />
            <result column="description" jdbcType="VARCHAR" property="description" />
        </association>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        admin_id, admin_name, admin_password, role_id, admin_status, create_time
    </sql>

    <select id="selectByName" resultMap="BaseResultMap">
        SELECT admin_name,admin_password
        FROM admin
        WHERE admin_name = #{adminName}
        AND status = 1;
    </select>

    <select id="list" resultMap="BaseResultMap">
        select a.admin_id, a.admin_name, a.admin_password, a.role_id,a.admin_status, a.create_time,b.admin_detail_id, b.admin_id, b.sex, b.age, b.phone, b.email, b.qq, b.update_time,r.role_id,r.role_name,r.description
        from admin a
        LEFT JOIN admin_detail b ON a.admin_id = b.admin_id
        LEFT JOIN role r ON a.role_id = r.role_id
        limit #{limit},#{size}
    </select>
    <select id="selectByNameOrTime" resultMap="BaseResultMap">
        select a.admin_id, a.admin_name, a.admin_password, a.role_id,a.admin_status, a.create_time,b.admin_detail_id, b.admin_id, b.sex, b.age, b.phone, b.email, b.qq, b.update_time,r.role_id,r.role_name,r.description
        from admin a
        LEFT JOIN admin_detail b ON a.admin_id = b.admin_id
        LEFT JOIN role r ON a.role_id = r.role_id
        WHERE admin_name LIKE CONCAT('%',#{adminName},'%')
        OR create_time BETWEEN CONCAT(#{createTime},' 00:00:00') AND CONCAT(#{createTime},' 23:59:59')
        limit #{limit},#{size}
    </select>
    <insert id="insert" keyColumn="admin_id" keyProperty="adminDto.adminId" parameterType="com.qf.ecms.domain.dto.AdminDto" useGeneratedKeys="true">
        INSERT INTO admin(admin_name, admin_password, role_id)
        VALUES (#{adminDto.adminName},#{adminDto.adminPassword},#{adminDto.roleId})
    </insert>

    <update id="update" parameterType="com.qf.ecms.domain.dto.AdminDto">
        update `admin`
        <set>
            <if test="adminDto.adminName != null">
                admin_name = #{adminDto.adminName,jdbcType=VARCHAR},
            </if>
            <if test="adminDto.adminPassword != null">
                admin_password = #{adminDto.adminPassword,jdbcType=VARCHAR},
            </if>
            <if test="adminDto.roleId != null">
                role_id = #{adminDto.roleId,jdbcType=INTEGER},
            </if>
        </set>
        where admin_id = #{adminDto.adminId,jdbcType=INTEGER}
    </update>

    <update id="delete">
        UPDATE admin
        SET admin_status = 0
        WHERE admin_id = #{adminId}
        AND admin_status = 1
    </update>

    <update id="deleteBatch">
        UPDATE admin
        SET admin_status = 0
        WHERE admin_id IN
        <foreach collection="adminIds" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
        AND admin_status = 1
    </update>

    <update id="active">
        UPDATE admin
        SET admin_status = 1
        WHERE admin_id = #{adminId}
        AND admin_status = 0
    </update>


</mapper>